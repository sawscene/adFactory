; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyName "adFactoryForFujiClient"
#define MyAppName "adFactory"
#define MyAppPublisher "ADTEK FUJI Co., Ltd."
#define MyAppURL "http://www.adtek-fuji.co.jp/"
#define MyAppContact "0564-31-4690"
#define MyAppVersion ReadIni(SourcePath+"version.ini", "Version", "Ver", "unknown")
#define jdkPath "Java\jdk1.8.0_151"
#define jrePath "Java\jre1.8.0_151"
#define javaPath "Java"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{281500E7-6BAF-4457-A558-CA1AA6ED6E38}
AppName={#MyName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppContact={#MyAppContact}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={code:GetDefaultDir}
DefaultGroupName={#MyAppName}
AppCopyright={#MyAppPublisher}
AllowNoIcons=yes
AllowUNCPath=no
OutputBaseFilename=adFactoryForFujiClientSetup_v{#MyAppVersion}
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin
CreateUninstallRegKey=no
DisableDirPage=yes
DisableProgramGroupPage=Yes
ChangesEnvironment=yes
Uninstallable=no
AlwaysRestart=no

[Languages]
Name: "en"; MessagesFile: "compiler:Default.isl"; LicenseFile :License_en.txt
Name: "jp"; MessagesFile: "compiler:Languages\Japanese.isl"; LicenseFile :License_jp.txt

[CustomMessages]

[Types]
 
[Components]

[Registry]
Check: not IsWin64; Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "JRE_HOME"; ValueData: "{pf32}\{#javaPath}\{code:GetJava32Path|8}";
Check: IsWin64; Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "JRE_HOME"; ValueData: "{pf64}\{#javaPath}\{code:GetJava64Path|8}";

[Dirs]
Name: {app}\bin; Check:isDbDirExist('{app}\bin'); Permissions: authusers-modify
Name: {app}\conf; Check:isDbDirExist('{app}\conf'); Permissions: users-modify
Name: {app}\plugin; Check:isDbDirExist('{app}\plugin'); Permissions: authusers-modify

[Files]
Source: "version.ini"; DestDir: "{app}"; DestName: "version_fujiclient.ini"; Flags: ignoreversion

;Binary files
Source: "bin\adCellProductionMonitor.exe"; DestDir: "{app}\bin"; Flags: ignoreversion

;Config files
Source: "conf\adAccessoryPlugins.xml"; DestDir: "{app}\conf"; Flags: ignoreversion uninsneveruninstall
Source: "conf\UnitTemplatePropertyTemplate.properties"; DestDir: "{app}\conf"; Flags: ignoreversion
Source: "conf\WorkflowPropertyTemplate.properties"; DestDir: "{app}\conf"; Flags: ignoreversion
Source: "conf\WorkPropertyTemplate.properties"; DestDir: "{app}\conf"; Flags: ignoreversion
Source: "conf\adAndonCustomizeToolItemList.ini"; DestDir: "{app}\conf"; Flags: ignoreversion
Source: "conf\adFactoryForFujiClient.properties"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist
Source: "conf\adCellProductionMonitor.properties"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist
Source: "conf\adFactoryImportFormat.xml"; DestDir: "{app}\conf"; Flags: ignoreversion
Source: "conf\adFactoryImportFormatFuji.xml"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist; 

;Plugin files
Source: "plugin\adManagerAppAnalysisPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; BeforeInstall: beforeInstallPlugin()
Source: "plugin\adManagerAppSchedulePlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion
Source: "plugin\adManagerAppUnitPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion
Source: "plugin\adManagerAppUnitTemplatePlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion
Source: "plugin\ForFujiLocalePlugin.jar"; DestDir: "{app}\plugin"; DestName: "StandardLocalePlugin.jar"; Flags: ignoreversion
Source: "plugin\adManaMonitorSettingPluginFuji.jar"; DestDir: "{app}\plugin"; DestName: "adManagerAndonSettingPlugin.jar"; Flags: ignoreversion
Source: "plugin\adMonitorCycleTaktTimePlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion
Source: "plugin\adManaProductionNaviPluginFuji.jar"; DestDir: "{app}\plugin";  DestName: "adManaProductionNaviPlugin.jar"; Flags: ignoreversion

;Font files
Source: "fonts\*"; DestDir: "{app}\fonts"; Flags: ignoreversion

;Java library files
Source: "library\postgresql-9.4-1201.jdbc41.jar"; DestDir: "{pf64}\{#jdkPath}\jre\lib\ext"; Check: IsWin64; Flags: onlyifdoesntexist
Source: "library\postgresql-9.4-1201.jdbc41.jar"; DestDir: "{pf64}\{#javaPath}\{code:GetJava64Path|8}\lib\ext"; Check: IsWin64; Flags: onlyifdoesntexist
Source: "library\postgresql-9.4-1201.jdbc41.jar"; DestDir: "{pf32}\{#javaPath}\{code:GetJava32Path|8}\lib\ext"; Check: not IsWin64; Flags: onlyifdoesntexist

[Icons]

[Run]
;Filename: "{app}\bin\nssm.exe"; Parameters: start adInterfaceService; Flags: runhidden
Filename: "net"; Parameters: start adInterfaceService; Flags: runhidden runascurrentuser

[UninstallRun]

[UninstallDelete]

[Code]
const RegKeyJRE = 'SOFTWARE\JavaSoft\Java Runtime Environment\';
const RegKeyEnv = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';

function isDbDirExist(path: string): Boolean;
begin
  Result := True;
  if DirExists(ExpandConstant(path)) then
  begin
    Result := False;
  end;
end;

procedure beforeInstallPlugin();
var
  ResultCode: Integer;
begin
  Log('[info]beforeInstallPlugin')
  Exec(ExpandConstant('{cmd}'), '/c net stop adInterfaceService', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

// 文字列を展開する
procedure Split(var Dest: TArrayOfString; Text: String; Separator: String);
var
  i, p: Integer;
begin
  i := 0;
  repeat
    SetArrayLength(Dest, i+1);
    p := Pos(Separator,Text);
    if p > 0 then begin
      Dest[i] := Copy(Text, 1, p-1);
      Text := Copy(Text, p + Length(Separator), Length(Text));
      i := i + 1;
    end else begin
      Dest[i] := Text;
      Text := '';
    end;
  until Length(Text)=0;
end;

// 64ビットOSにてJREのフォルダー名を取得する
function GetJava64Path(MinVersion: string): string;
var
  Index: Integer;
  Path: string;
  Versions: TArrayOfString;
  StringArray: TArrayOfString;
begin
  Result := ExpandConstant('{pf64}\{#jrePath}');
  if RegGetSubkeyNames(HKLM64, RegKeyJRE, Versions) then
    for Index := 0 to GetArrayLength(Versions)-1 do
      if (Versions[Index][2] = '.') and (Versions[Index][3] >= MinVersion) and
        RegQueryStringValue(HKLM64, RegKeyJRE + Versions[Index], 'JavaHome', Path) then
      begin
        Split(StringArray, Path,'\');
        Result := StringArray[GetArrayLength(StringArray)-1];
        Exit;
      end;
end;

// 32ビットOSにてJREのフォルダー名を取得する
function GetJava32Path(MinVersion: string): string;
var
  Index: Integer;
  Path: string;
  Versions: TArrayOfString;
  StringArray: TArrayOfString;
begin
  Result := ExpandConstant('{pf32}\{#jrePath}');
  if RegGetSubkeyNames(HKLM32, RegKeyJRE, Versions) then
    for Index := 0 to GetArrayLength(Versions)-1 do
      if (Versions[Index][2] = '.') and (Versions[Index][3] >= MinVersion) and
        RegQueryStringValue(HKLM32, RegKeyJRE + Versions[Index], 'JavaHome', Path) then
      begin
        Split(StringArray, Path,'\');
        Result := StringArray[GetArrayLength(StringArray)-1];
        Exit;
      end;
end;

// インストールパスを取得する
function GetDefaultDir(def: string): string;
var
  Path: String;
begin
  if RegValueExists(HKEY_LOCAL_MACHINE, RegKeyEnv, 'ADFACTORY_HOME')
  then begin
    RegQueryStringValue(HKLM32, RegKeyEnv, 'ADFACTORY_HOME', Path);
    Result := Path;
  end else begin
    Result := 'c:\adFactory';
  end;
end;

// プロパティファイルの値を更新する
procedure UpdatePropValue(PropFile: String; PropKey: string; PropValue: string);
var
  FileLines: TStringList;
  Index: Integer;
  StringArray: TArrayOfString;
  IsNotExist: Boolean;
begin
  FileLines := TStringList.Create;
  try
    FileLines.LoadFromFile(PropFile);
    // 該当キーの行を検索して更新する
    IsNotExist := True;
    for Index := 0 to FileLines.Count - 1 do
    begin
      Split(StringArray, FileLines[Index], '=');
      if (StringArray[0] = PropKey) then
      begin
        FileLines[Index] := PropKey + '=' + PropValue;
        IsNotExist := False;
      end;
    end;
    // 該当キーの行が無かった場合は追加する
    if (IsNotExist) then
    begin
      FileLines.Add(PropKey + '=' + PropValue)
    end;
    // ファイルを更新する
    FileLines.SaveToFile(PropFile);
  finally
    FileLines.Free;
  end
end;

// インストール前後タスク
procedure CurStepChanged(CurStep: TSetupStep);
var
  ResultCode: Integer;
begin
  case CurStep of
    ssInstall:// インストール開始前
      begin
      end;
    ssPostInstall:// インストール終了後
      begin
      end;
    ssDone:// セットアッププログラム終了前
    begin
      // サイレント実行でない場合、adSetupToolを起動する
      if not WizardSilent() then
      begin
        Exec(ExpandConstant('{app}\bin\adSetupTool.exe'), '-custom', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
      end; 
    end;
  end;
end;
