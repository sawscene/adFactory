; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "adFactoryForFujiServer"
#define MyAppPublisher "ADTEK FUJI Co., Ltd."
#define MyAppURL "http://www.adtek-fuji.co.jp/"
#define MyAppContact "0564-31-4690"
#define MyAppVersion ReadIni(SourcePath+"version.ini", "Version", "Ver", "unknown")

; v1.9.7
; #define TomeePath "apache-tomee-plume-1.7.4"
; v2.0.0
#define TomeePath "apache-tomee-plume-7.1.1"

#define ApachePath "Apache-2.2.34"

#define ApacheFtpPath "apache-ftpserver-1.0.6"

#define jrePath "Java\jre1.8.0_151"
#define javaPath "Java"

;;;#define PostgresqlInstaller "postgresql-9.3.19-1-windows-x64.exe"
#define PostgresqlPath "postgreSQL11"
#define PostgresqlService "postgresql-x64-11.4"

#define TomeeName "TomEE_7" 
#define ApacheName "Apache2" 
#define PostgresqlName "postgresql-x64-11"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{75F4AAEB-6721-4A2A-95DD-552F27EC8C41}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppContact={#MyAppContact}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
; DefaultDirName={%ADFACTORY_HOME}
DefaultDirName={code:GetDefaultDir}
DefaultGroupName={#MyAppName}
AppCopyright={#MyAppPublisher}
AllowNoIcons=yes
AllowUNCPath=no
OutputBaseFilename=adFactoryForFujiServer_v{#MyAppVersion}
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin
DisableDirPage=yes
DisableProgramGroupPage=Yes
SetupLogging=yes
ChangesEnvironment=yes

[Languages]
Name: "en"; MessagesFile: "compiler:Default.isl"; LicenseFile :License_en.txt
Name: "jp"; MessagesFile: "compiler:Languages\Japanese.isl"; LicenseFile :License_jp.txt

[CustomMessages]

[Types]
 
[Components]

[Registry]
Root: HKLM64; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "ADFACTORY_CUSTOM"; ValueData: "YES"; Flags: uninsdeletevalue;

[Dirs]

[Files]
Source: "version.ini"; DestDir: "{app}"; DestName: "version_fuji_server.ini"; Flags: ignoreversion

;config file
Source: "3rd\tomee\tomee.xml"; DestDir: "{app}\3rd\\{#TomeePath}\conf"; Flags: ignoreversion; BeforeInstall: beforeInstallTomee();
Source: "3rd\apache\httpd.conf"; DestDir: "{app}\3rd\\{#ApachePath}\conf"; Flags: ignoreversion; BeforeInstall: beforeInstallApache();

;;;Source: "bin\configure_fuji.bat"; DestDir: "{app}\bin"; Flags: ignoreversion; AfterInstall: configure()
Source: "bin\daily_task.bat"; DestDir: "{app}\bin"; Flags: ignoreversion

Source: "conf\adFactory.properties"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist
Source: "conf\adFactoryForFujiService.properties"; DestDir: "{app}\conf"; Flags: ignoreversion; 

Source: "deploy\softwareupdate.xml"; DestDir: "{app}\deploy"; Flags: ignoreversion; 

;db file
;;;Source: "{src}\3rd\{#PostgresqlInstaller}"; DestDir: "{tmp}"; Flags: external; ExternalSize: 212058112; Check: isServiceInstall('{#PostgresqlName}'); AfterInstall: installPostgreSQL()
;;;Source: "3rd\postgresql\postgresql.conf.temp"; DestDir: "{app}\3rd\{#PostgresqlPath}\data"; Flags: ignoreversion; AfterInstall: updatePostgreConf()

;;;Source: "db\postgres\custom\change_password.bat"; DestDir: "{app}\db\postgres\custom"; Flags: ignoreversion; 

Source: "db\postgres\custom\create_adfactoryforfujidb.sql"; DestDir: "{app}\db\postgres\custom"; Flags: ignoreversion; 
Source: "db\postgres\custom\create_adfactoryforfujidb_tables.sql"; DestDir: "{app}\db\postgres\custom"; Flags: ignoreversion; 
Source: "db\postgres\custom\create_adfactroyforfujidb.bat"; DestDir: "{app}\db\postgres\custom"; Flags: ignoreversion;
Source: "db\postgres\custom\update\*"; DestDir: "{app}\db\postgres\custom\update"; Flags: ignoreversion;

Source: "db\postgres\custom\create_adFactoryTraceDB.sql"; DestDir: "{app}\db\postgres\custom"; Flags: ignoreversion; 
Source: "db\postgres\custom\create_adFactoryTraceDB_tables.sql"; DestDir: "{app}\db\postgres\custom"; Flags: ignoreversion; 
Source: "db\postgres\custom\create_adFactoryTraceDB.bat"; DestDir: "{app}\db\postgres\custom"; Flags: ignoreversion; 

Source: "3rd\postgresql\pg_hba.conf"; DestDir: "{app}\3rd\{#PostgresqlPath}\data"; Flags: ignoreversion;

;java liblary
;;;Source: "library\postgresql-9.4-1201.jdbc41.jar"; DestDir: "{app}\3rd\{#TomeePath}\lib"; Flags: onlyifdoesntexist
;;;Source: "library\postgresql-9.4-1201.jdbc41.jar"; DestDir: "{pf64}\{#javaPath}\{code:GetJava64Path|8}\lib\ext"; Check: IsWin64; Flags: onlyifdoesntexist uninsneveruninstall

;war file
Source: "war\adFactoryForFujiServer.war"; DestDir: "{app}\3rd\{#TomeePath}\webapps"; Flags: ignoreversion;

[Icons]

[Run]
;;;Filename: "{app}\db\postgres\custom\change_password.bat"; WorkingDir: "{app}\db\postgres\custom"; Flags: runascurrentuser waituntilterminated runhidden; AfterInstall: DeleteFileProcedure('{app}\db\postgres\custom\change_password.bat')
Filename: "{app}\db\postgres\custom\create_adfactroyforfujidb.bat"; WorkingDir: "{app}\db\postgres\custom"; Flags: runascurrentuser waituntilterminated runhidden; AfterInstall: DeleteFileProcedure('{app}\db\postgres\custom\create_adfactroyforfujidb.bat')
Filename: "{app}\db\postgres\custom\update\update_1to2.bat"; WorkingDir: "{app}\db\postgres\custom\update"; Flags: runascurrentuser waituntilterminated runhidden; AfterInstall: DeleteFileProcedure('{app}\db\postgres\custom\update\update_1to2.bat')
Filename: "{app}\db\postgres\custom\update\update_2to3.bat"; WorkingDir: "{app}\db\postgres\custom\update"; Flags: runascurrentuser waituntilterminated runhidden; AfterInstall: DeleteFileProcedure('{app}\db\postgres\custom\update\update_2to3.bat')
Filename: "{app}\db\postgres\custom\update\update_3to4.bat"; WorkingDir: "{app}\db\postgres\custom\update"; Flags: runascurrentuser waituntilterminated runhidden; AfterInstall: DeleteFileProcedure('{app}\db\postgres\custom\update\update_3to4.bat')
Filename: "{app}\db\postgres\custom\create_adFactoryTraceDB.bat"; WorkingDir: "{app}\db\postgres\custom"; Flags: runascurrentuser waituntilterminated runhidden; AfterInstall: DeleteFileProcedure('{app}\db\postgres\custom\create_adFactoryTraceDB.bat')
Filename: "{app}\db\postgres\custom\update\update_4to5.bat"; WorkingDir: "{app}\db\postgres\custom\update"; Flags: runascurrentuser waituntilterminated runhidden; AfterInstall: DeleteFileProcedure('{app}\db\postgres\custom\update\update_4to5.bat')
Filename: "{app}\db\postgres\custom\update\update_5to6.bat"; WorkingDir: "{app}\db\postgres\custom\update"; Flags: runascurrentuser waituntilterminated runhidden; AfterInstall: DeleteFileProcedure('{app}\db\postgres\custom\update\update_5to6.bat')
Filename: "net"; Parameters: stop {#PostgresqlService}; Flags: runhidden runascurrentuser waituntilterminated
Filename: "net"; Parameters: start {#PostgresqlService}; Flags: runhidden runascurrentuser
Filename: "net"; Parameters: stop {#TomeeName}; Flags: runhidden runascurrentuser waituntilterminated
Filename: "net"; Parameters: start {#TomeeName}; Flags: runhidden runascurrentuser
Filename: "net"; Parameters: stop {#ApacheName}; Flags: runhidden runascurrentuser waituntilterminated
Filename: "net"; Parameters: start {#ApacheName}; Flags: runhidden runascurrentuser

[InstallDelete]

[UninstallDelete]

[UninstallRun]

[Code]
//************************* Win32 API *************************
#ifdef UNICODE
  #define AW "W"
#else
  #define AW "A"
#endif

function SetEnvironmentVariable(lpName: string; lpValue: string): BOOL;
  external 'SetEnvironmentVariable{#AW}@kernel32.dll stdcall';

type
    SERVICE_STATUS = record
        dwServiceType               : cardinal;
        dwCurrentState              : cardinal;
        dwControlsAccepted          : cardinal;
        dwWin32ExitCode             : cardinal;
        dwServiceSpecificExitCode   : cardinal;
        dwCheckPoint                : cardinal;
        dwWaitHint                  : cardinal;
    end;
    HANDLE = cardinal;

const
    SERVICE_QUERY_CONFIG        = $1;
    SERVICE_CHANGE_CONFIG       = $2;
    SERVICE_QUERY_STATUS        = $4;
    SERVICE_START               = $10;
    SERVICE_STOP                = $20;
    SERVICE_ALL_ACCESS          = $f01ff;
    SC_MANAGER_ALL_ACCESS       = $f003f;
    SERVICE_WIN32_OWN_PROCESS   = $10;
    SERVICE_WIN32_SHARE_PROCESS = $20;
    SERVICE_WIN32               = $30;
    SERVICE_INTERACTIVE_PROCESS = $100;
    SERVICE_BOOT_START          = $0;
    SERVICE_SYSTEM_START        = $1;
    SERVICE_AUTO_START          = $2;
    SERVICE_DEMAND_START        = $3;
    SERVICE_DISABLED            = $4;
    SERVICE_DELETE              = $10000;
    SERVICE_CONTROL_STOP        = $1;
    SERVICE_CONTROL_PAUSE       = $2;
    SERVICE_CONTROL_CONTINUE    = $3;
    SERVICE_CONTROL_INTERROGATE = $4;
    SERVICE_STOPPED             = $1;
    SERVICE_START_PENDING       = $2;
    SERVICE_STOP_PENDING        = $3;
    SERVICE_RUNNING             = $4;
    SERVICE_CONTINUE_PENDING    = $5;
    SERVICE_PAUSE_PENDING       = $6;
    SERVICE_PAUSED              = $7;

function OpenSCManager(lpMachineName, lpDatabaseName: string; dwDesiredAccess :cardinal): HANDLE;
external 'OpenSCManager{#AW}@advapi32.dll stdcall';

function OpenService(hSCManager :HANDLE;lpServiceName: string; dwDesiredAccess :cardinal): HANDLE;
external 'OpenService{#AW}@advapi32.dll stdcall';

function DeleteService(hService :HANDLE): boolean;
external 'DeleteService@advapi32.dll stdcall';

function CloseServiceHandle(hSCObject :HANDLE): boolean;
external 'CloseServiceHandle@advapi32.dll stdcall';

//************************* Constants *************************
const RegKeyJRE = 'SOFTWARE\JavaSoft\Java Runtime Environment\';
const RegKeyEnv = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';

// サービスマネージャをオープンする。
function openServiceManager(): HANDLE;
begin
  if UsingWinNT() = true then begin
    Result := OpenSCManager('', '', SC_MANAGER_ALL_ACCESS);
    if Result = 0 then
      MsgBox('The service manager is not available.', mbError, MB_OK)
    end
    else begin
      MsgBox('Only NT based systems supported.', mbError, MB_OK)
      Result := 0;
    end
end;

// サービスをインストールするかどうかを取得する。
function isServiceInstall(serviceName: string) : boolean;
var
    hSCM    : HANDLE;
    hService: HANDLE;
begin
    hSCM := openServiceManager();
    Result := True;
    if hSCM <> 0 then begin
        hService := OpenService(hSCM, serviceName, SERVICE_QUERY_CONFIG);
        if hService <> 0 then begin
            Result := False;
            CloseServiceHandle(hService)
        end;
        CloseServiceHandle(hSCM)
    end
end;

// ファイルを削除する。
procedure DeleteFileProcedure(FilePath: string);
var
  DelResult: string;
begin
  Log('[info]DeleteFileProcedure' + '(' + FilePath + ')');
  if(DeleteFile(ExpandConstant(FilePath))) then
    DelResult := 'Success'
  else
    DelResult := 'Failure';
  Log('[info]Result:' + DelResult);
end;

// TomEE
procedure beforeInstallTomee();
var
  ResultCode: Integer;
begin
  if DirExists(ExpandConstant('{app}\3rd\{#TomeePath}')) then
  begin
    Log('[info]beforeInstallTomee')
    Exec(ExpandConstant('{cmd}'), '/c net stop TomEE', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    // WebAppフォルダの削除
    DelTree(ExpandConstant('{app}\3rd\{#TomeePath}\webapps\adFactoryForFujiServer'), True, True, True);
    Log('[info]ResultCode:' + IntToStr(ResultCode))
  end;
end;

// Apache
procedure beforeInstallApache();
var
  ResultCode: Integer;
begin
  if DirExists(ExpandConstant('{app}\3rd\{#ApachePath}')) then
  begin
    Log('[info]beforeInstallApache')
    Exec(ExpandConstant('{cmd}'), '/c net stop Apache2', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    Log('[info]ResultCode:' + IntToStr(ResultCode))
  end;
end;

// postgreSQLをインストールする。
//procedure installPostgreSQL();
//var
//  ResultCode: Integer;
//begin
//  //msgbox('Installation to ' + ExpandConstant('{app}\3rd\{#PostgresqlPath}'), mbConfirmation, MB_OK);
//  Log('[info]installPostgreSQL')
//  Exec(ExpandConstant('{tmp}\{#PostgresqlInstaller}'), '--mode unattended --serverport 5432 --superpassword postgres --prefix ' + ExpandConstant('{app}\3rd\{#PostgresqlPath}') + ' --datadir ' + ExpandConstant('{app}\3rd\{#PostgresqlPath}\data'),
//    ExpandConstant('{tmp}'), SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
//  Log('[info]ResultCode:' + IntToStr(ResultCode))
//end;

// postgreSQLの設定を更新する。
//procedure updatePostgreConf();
//var
//  ResultCode: Integer;
//begin
//  //msgbox('Installation to ' + ExpandConstant('{app}\3rd\{#PostgresqlPath}'), mbConfirmation, MB_OK);
//  Log('[info]updatePostgreConf')
//  // 設定を更新する。
//  ShellExec('', ExpandConstant('{app}\3rd\{#PostgresqlPath}\data\replace.jse'), ExpandConstant('{app}'),
//    ExpandConstant('{app}\3rd\{#PostgresqlPath}\data'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
//  Log('[info]ResultCode:' + IntToStr(ResultCode))
//end;

// Firewallのポートを開放する。
//procedure configure();
//var
//  ResultCode: Integer;
//begin
//  Log('[info]configure')
//  Exec(ExpandConstant('{app}\bin\configure_fuji.bat'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
//  Log('[info]ResultCode:' + IntToStr(ResultCode))
//end;

// 文字列を展開する。
procedure Split(var Dest: TArrayOfString; Text: String; Separator: String);
var
  i, p: Integer;
begin
  i := 0;
  repeat
    SetArrayLength(Dest, i+1);
    p := Pos(Separator,Text);
    if p > 0 then begin
      Dest[i] := Copy(Text, 1, p-1);
      Text := Copy(Text, p + Length(Separator), Length(Text));
      i := i + 1;
    end else begin
      Dest[i] := Text;
      Text := '';
    end;
  until Length(Text)=0;
end;

// 64ビットOSにてJREのフォルダー名を取得する。
function GetJava64Path(MinVersion: string): string;
var
  Index: Integer;
  Path: string;
  Versions: TArrayOfString;
  StringArray: TArrayOfString;
begin
  Result := ExpandConstant('{pf64}\{#jrePath}');
  if RegGetSubkeyNames(HKLM64, RegKeyJRE, Versions) then
    for Index := 0 to GetArrayLength(Versions)-1 do
      if (Versions[Index][2] = '.') and (Versions[Index][3] >= MinVersion) and
        RegQueryStringValue(HKLM64, RegKeyJRE + Versions[Index], 'JavaHome', Path) then
      begin
        Split(StringArray, Path,'\');
        Result := StringArray[GetArrayLength(StringArray)-1];
        Exit;
      end;
end;

// インストールパスを取得する
function GetDefaultDir(def: string): string;
var
  Path: String;
begin
  if RegValueExists(HKEY_LOCAL_MACHINE, RegKeyEnv, 'ADFACTORY_HOME')
  then begin
    RegQueryStringValue(HKLM32, RegKeyEnv, 'ADFACTORY_HOME', Path);
    Result := Path;
  end else begin
    Result := 'c:\adFactory';
  end;
end;

// プロパティファイルの値を更新する
//   PropFile: プロパティファイルパス
//   PropKey: プロパティのキー
//   PropValue: プロパティの値
//   IsAddOnly: 追加のみフラグ (True: 追加のみ, False: 追加・更新)
procedure UpdatePropValue(PropFile: String; PropKey: string; PropValue: string; IsAddOnly: Boolean);
var
  FileLines: TStringList;
  Index: Integer;
  StringArray: TArrayOfString;
  IsNotExist: Boolean;
begin
  // ファイルがない場合は何もしない
  if not FileExists(PropFile) then
  begin
    Exit;
  end;

  FileLines := TStringList.Create;
  try
    FileLines.LoadFromFile(PropFile);
    // 該当キーの行を検索して更新する
    IsNotExist := True;
    for Index := 0 to FileLines.Count - 1 do
    begin
      Split(StringArray, FileLines[Index], '=');
      if (StringArray[0] = PropKey) then
      begin
        FileLines[Index] := PropKey + '=' + PropValue;
        IsNotExist := False;
      end;
    end;
    // 該当キーの行が無かった場合は追加する
    if (IsNotExist) then
    begin
      FileLines.Add(PropKey + '=' + PropValue)
    end else begin
      // 新規追加のみ場合は更新しない
      if (IsAddOnly) then
      begin
        Exit;
      end;
    end;
    // ファイルを更新する
    FileLines.SaveToFile(PropFile);
  finally
    FileLines.Free;
  end
end;

// インストール前後タスク
procedure CurStepChanged(CurStep: TSetupStep);
begin
  case CurStep of
    ssInstall:// インストール開始前
      begin
      end;
    ssPostInstall:// インストール終了後
      begin
        UpdatePropValue(ExpandConstant('{app}\conf\adFactory.properties'), 'traceabilityDBEnabled', 'true', True);
      end;
    ssDone:// セットアッププログラム終了前
//    begin
//      filecopy(ExpandConstant('{log}'), ExpandConstant('{app}\install_ForFuji.log'), false);
//    end;
    begin
    end;
  end;
end;
