; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyName "adLinkService"
#define MyAppName "adFactory"
#define MyAppPublisher "ADTEK FUJI Co., Ltd."
#define MyAppURL "http://www.adtek-fuji.co.jp/"
#define MyAppContact "0564-31-4690"
#define MyAppVersion ReadIni(SourcePath+"version.ini", "Version", "Ver", "unknown")

#define OpenJDKZip "amazon-corretto-21.0.4.7.1-windows-x64-jdk.zip"
#define OpenJDKPath "jdk21.0.4_7"

[Setup]
AppId={{496F1F0B-AEAD-4C32-90EF-4FC4C3E8F5C8}
AppName={#MyName}
AppVersion={#MyAppVersion}
AppVerName={#MyName}
AppPublisher={#MyAppPublisher}
AppContact={#MyAppContact}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName=C:\adFactory
DefaultGroupName={#MyAppName}
AppCopyright={#MyAppPublisher}
AllowNoIcons=yes
AllowUNCPath=no
OutputBaseFilename=adLinkServiceSetup_v{#MyAppVersion}
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin
// CreateUninstallRegKey=no
DisableDirPage=yes
ChangesEnvironment=yes

[Languages]
Name: "en"; MessagesFile: "compiler:Default.isl"; LicenseFile :License_en.txt
Name: "jp"; MessagesFile: "compiler:Languages\Japanese.isl"; LicenseFile :License_jp.txt

[CustomMessages]
en.adLinkService=adLinkService ManagementService
jp.adLinkService=adLinkService 管理サービス

[Types]
 
[Components]

[Registry]
Root: HKLM64; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "ADFACTORY_HOME"; ValueData: "{app}";
Root: HKLM64; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "JAVA_HOME"; ValueData: "{app}\3rd\{#OpenJDKPath}";

[Dirs]
Name: {app}\3rd; Check:isDbDirExist('{app}\3rd'); Permissions: authusers-modify
Name: {app}\bin; Check:isDbDirExist('{app}\bin'); Permissions: authusers-modify
Name: {app}\conf; Check:isDbDirExist('{app}\conf'); Permissions: authusers-modify
Name: {app}\plugin; Check:isDbDirExist('{app}\plugin'); Permissions: authusers-modify
Name: {app}\logs; Check:isDbDirExist('{app}\logs'); Permissions: users-modify

[Files]
Source: "version.ini"; DestDir: "{app}"; DestName: "version_link.ini"; Flags: ignoreversion; BeforeInstall: getNowVersion(); AfterInstall: getNextVersion()
Source: "unzipper.dll"; Flags: dontcopy
Source: "bin\nssm.exe"; DestDir: "{app}\bin"; Flags: onlyifdoesntexist;
Source: "{src}\3rd\{#OpenJDKZip}"; DestDir: "{tmp}"; Flags: external skipifsourcedoesntexist; ExternalSize: 201696048; Check: isDbDirExist('{app}\3rd\{#OpenJDKPath}'); AfterInstall: installJava()

// プラグイン
Source: "adLinkService\bin\adLinkService.exe"; DestDir: "{app}\bin"; Flags: ignoreversion; BeforeInstall: stopWindowsService('adLinkService'); AfterInstall: setupWindowsService('adLinkService', '{cm:adLinkService}', '{app}\bin\adLinkService.exe');
Source: "adLinkService\plugin\adLinkBarcode.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; 
Source: "adLinkService\plugin\adLinkFPInspection.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion;
Source: "adLinkService\plugin\adLinkServerURLReceiver.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion;

// 設定ファイル
Source: "adLinkService\conf\adLinkServiceApp.properties"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist;
Source: "adLinkService\conf\adLinkBarcode.ini"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist;

[Icons]

[Run]
Filename: "{app}\bin\nssm.exe"; Parameters: start adLinkService; Flags: runhidden runascurrentuser

[UninstallDelete]
Type: files; Name: "{app}\bin\*.*"
Type: files; Name: "{app}\plugin\*.*"
Type: filesandordirs; Name: "{app}\plugin"
Type: filesandordirs; Name: "{app}\bin"

[UninstallRun]
Filename: "{app}\bin\nssm.exe"; Parameters: stop adLinkService; Flags: runhidden
Filename: "{app}\bin\nssm.exe"; Parameters: remove adLinkService confirm; Flags: runhidden

[Code]

//************************* Win32 API *************************
#ifdef UNICODE
  #define AW "W"
#else
  #define AW "A"
#endif

function SetEnvironmentVariable(lpName: string; lpValue: string): BOOL;
  external 'SetEnvironmentVariable{#AW}@kernel32.dll stdcall';

//************************* Constants *************************
const RegKeyJRE = 'SOFTWARE\JavaSoft\Java Runtime Environment\';
const RegKeyEnv = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';

//************************* Global Variables *************************
var NowVersion: String;
var NextVersion: String;

procedure unzip(src, target: AnsiString);
  external 'unzip@files:unzipper.dll stdcall delayload';

function isDbDirExist(path: string): Boolean;
begin
  Result := True;
  if DirExists(ExpandConstant(path)) then
  begin
    Result := False;
  end;
end;

// JAVA_HOMEを設定する。
procedure SetJdkPath(path: String);
begin
  if not SetEnvironmentVariable('JAVA_HOME', path) then
    MsgBox(SysErrorMessage(DLLGetLastError), mbError, MB_OK);
  Log('[info]JAVA_HOME:' + path)
end;

// OpenJDKのパッケージを解凍する。
procedure unzipOpenJDK();
begin
  Log('[info]unzipOpenJDK')
  unzip(AnsiString(ExpandConstant('{tmp}\{#OpenJDKZip}')), AnsiString(ExpandConstant('{app}\3rd')));
end;

// Javaをインストールする
procedure installJava();
var
  ResultCode: Integer;
begin
  //msgbox('Installation to ' + ExpandConstant('{pf64}\{#JavaPath}'), mbConfirmation, MB_OK);
  Log('[info]installJava')
  // JAVAをインストールする。
  unzipOpenJDK();

  SetJdkPath(ExpandConstant('{app}\3rd\{#OpenJDKPath}'));
end;

// 文字列を展開する。
procedure Split(var Dest: TArrayOfString; Text: String; Separator: String);
var
  i, p: Integer;
begin
  i := 0;
  repeat
    SetArrayLength(Dest, i+1);
    p := Pos(Separator,Text);
    if p > 0 then begin
      Dest[i] := Copy(Text, 1, p-1);
      Text := Copy(Text, p + Length(Separator), Length(Text));
      i := i + 1;
    end else begin
      Dest[i] := Text;
      Text := '';
    end;
  until Length(Text)=0;
end;


// インストールパスを取得する
function GetDefaultDir(def: string): string;
var
  Path: String;
begin
  if RegValueExists(HKEY_LOCAL_MACHINE, RegKeyEnv, 'ADFACTORY_HOME')
  then begin
    RegQueryStringValue(HKLM32, RegKeyEnv, 'ADFACTORY_HOME', Path);
    Result := Path;
  end else begin
    Result := 'c:\adFactory';
  end;
end;

// サービスを停止する
procedure stopWindowsService(name: String);
var
  ResultCode: Integer;
begin
  Log('[info]stopWindowsService:' + name)
  Exec(ExpandConstant('{app}\bin\nssm.exe'), 'stop ' + name,
    ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

// サービスを設定する。
procedure setupWindowsService(name, disp, path: String);
var
  ResultCode: Integer;
begin
  Log('[info]setupWindowsService:' + name + ', ' + disp + ', ' + ExpandConstant(path))
  Exec(ExpandConstant('{app}\bin\nssm.exe'), 'stop ' + name,
    ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
  Log('[info]ResultCode:' + '{app}\bin\nssm.exe' + 'install ' + name + ' ' + ExpandConstant(path) + ' -silent')
  Exec(ExpandConstant('{app}\bin\nssm.exe'), 'install ' + name + ' ' + ExpandConstant(path) + ' -silent',
    ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
  Exec(ExpandConstant('{app}\bin\nssm.exe'), 'set ' + name + ' DisplayName "' + ExpandConstant(disp) + '"',
    ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
  Exec(ExpandConstant('{app}\bin\nssm.exe'), 'set ' + name + ' Description "' + ExpandConstant(disp) + '"',
    ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

procedure getNowVersion();
//var
//  ResultCode: Integer;
begin
  NowVersion:=GetIniString('Version', 'InternalVer', 'unknown', ExpandConstant('{app}\adLinkService\version.ini'));
  Log('[info]NowVersion:' + NowVersion)
end;

procedure getNextVersion();
//var
//  ResultCode: Integer;
begin
  NextVersion:=GetIniString('Version', 'InternalVer', 'unknown', ExpandConstant('{app}\adLinkService\version.ini'));
  Log('[info]NextVersion:' + NextVersion)
end;
