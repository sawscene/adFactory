; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "adFactory TP"
#define MyAppPublisher "ADTEK FUJI Co., Ltd."
#define MyAppURL "http://www.adtek-fuji.co.jp/"
#define MyAppContact "0564-31-4690"
#define MyAppVersion ReadIni(SourcePath+"version.ini", "Version", "Ver", "unknown")
#define JavaInstaller "jdk-8u321-windows-i586.exe"
#define JavaInstaller64 "jdk-8u321-windows-x64.exe"
#define jdkPath "Java\jdk1.8.0_321"
#define jrePath "Java\jre1.8.0_321"
#define javaPath "Java"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{6E63DE43-6A16-46C6-A0E8-3C72486D61DE}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppContact={#MyAppContact}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={code:GetDefaultDir}
DefaultGroupName={#MyAppName}
AppCopyright={#MyAppPublisher}
AllowNoIcons=yes
AllowUNCPath=no
OutputBaseFilename=adFactoryTPSetup_v{#MyAppVersion}
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin
DisableDirPage=yes
DisableProgramGroupPage=Yes
ChangesEnvironment=yes

[Languages]
Name: "en"; MessagesFile: "compiler:Default.isl"; LicenseFile :License_en.txt
Name: "jp"; MessagesFile: "compiler:Languages\Japanese.isl"; LicenseFile :License_jp.txt

[CustomMessages]
en.fullInstall=full install
en.managementInstall=adFactory management tools install
en.clientInstall=adFactory client tools install
en.customInstall=custom install
en.managementTools=adFactory Management Tools
en.adManagerTool=adManager application
en.clientTools=Client Tools
en.adAndonTool=adMonitor application
en.otherTools=Other Tools
en.adFactorySettingTool=adFactory Setting Tool
en.alert_not_installed=Please install adFactory base.
en.alert_not_equal_version=The version of adFactory base is new, so it can not be installed. Check the version.
jp.fullInstall=完全インストール
jp.managementInstall=adFactory管理ツールのインストール
jp.clientInstall=adFactoryクライアントツールのインストール
jp.customInstall=カスタムインストール
jp.managementTools=adFactory 管理ツール
jp.adManagerTool=adManager アプリケーション
jp.clientTools=adFactory クライアントツール
jp.adAndonTool=adMonitor アプリケーション
jp.otherTools=その他ツール
jp.adFactorySettingTool=adFactory設定変更ツール
jp.alert_not_installed=adFactory 本体をインストールしてください。
jp.alert_not_equal_version=adFactory 本体のバージョンが新しいため、インストールできません。バージョンを確認してください。

[Types]
Name: "full"; Description: {cm:fullInstall}
Name: "management"; Description: {cm:managementInstall}
Name: "client"; Description: {cm:clientInstall}
Name: "custom"; Description: {cm:customInstall}; Flags: iscustom
 
[Components]
Name: "management"; Description: {cm:managementTools}; Types: "full management"
Name: "management\adManager"; Description: {cm:adManagerTool}; Types: "full management"
Name: "client"; Description: {cm:clientTools}; Types: "full client"
Name: "client\adAndon"; Description: {cm:adAndonTool}; Types: "full client"
; Name: "other"; Description: {cm:otherTools}; Types: "full management"
; Name: "other\adFactorySettingTool"; Description: {cm:adFactorySettingTool}; Types: "full management client"

[Registry]
Check: not IsWin64; Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "JRE_HOME"; ValueData: "{pf32}\{#javaPath}\{code:GetJava32Path|8}";
Check: IsWin64; Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "JRE_HOME"; ValueData: "{pf64}\{#javaPath}\{code:GetJava64Path|8}";

[Dirs]

[Files]
Source: "version.ini"; DestDir: "{app}"; DestName: "version_tp.ini"; Flags: ignoreversion

; Source: "liblary\*"; DestDir: "{pf64}\{#javaPath}\{code:GetJava64Path|8}\lib\ext"; Check: IsWin64; Flags: ignoreversion
; Source: "liblary\*"; DestDir: "{pf32}\{#javaPath}\{code:GetJava32Path|8}\lib\ext"; Check: not IsWin64; Flags: ignoreversion

; Source: "licenses\*"; DestDir: "{app}\licenses"; Flags: ignoreversion

Source: "conf\tp\adAndonCustomizeToolItemList.ini"; DestDir: "{app}\conf"; Flags: ignoreversion uninsneveruninstall; Components: management\adManager or client\adAndon
Source: "conf\tp\adAccessoryPlugins.xml"; DestDir: "{app}\conf"; Flags: ignoreversion uninsneveruninstall; Components: management\adManager

Source: "plugin\adManaMonitorSettingPluginTP.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: management\adManager
Source: "plugin\adMonitorEquipmentDeliveryPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adMonitorSuspendedRatePlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adMonitorWorkDeliveryPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adMonitorYieldDiffPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon

Source: "deploy\softwareupdate_tp.xml"; DestDir: "{app}\deploy"; DestName: "softwareupdate.xml"; Flags: ignoreversion uninsneveruninstall

[Icons]

[Run]

[InstallDelete]
Type: files; Name: "{app}\version_tp.ini"
Type: files; Name: "{app}\plugin\adManagerAndonSettingPlugin.jar"

[UninstallDelete]

[UninstallRun]

[Code]
const RegKeyJRE = 'SOFTWARE\JavaSoft\Java Runtime Environment\';
const RegKeyEnv = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';
  
function isDbDirExist(path: string): Boolean;
begin
  Result := True;
  if DirExists(ExpandConstant(path)) then
  begin
    Result := False;
  end;
end;

procedure installJava();
var
  ResultCode: Integer;
begin
  //msgbox('Installation to ' + ExpandConstant('{pf}\{#JavaPath}'), mbConfirmation, MB_OK);
  if IsWin64 then
  begin
    if isDbDirExist('{pf64}\{#jrePath}') then
    begin
      Exec(ExpandConstant('{tmp}\{#JavaInstaller64}'), '/s',
      ExpandConstant('{tmp}'), SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
    end;
  end
  else
  begin
    if isDbDirExist('{pf32}\{#jrePath}') then
    begin
      Exec(ExpandConstant('{tmp}\{#JavaInstaller}'), '/s',
      ExpandConstant('{tmp}'), SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
    end;
  end;
end;

procedure stopService();
var
  ResultCode: Integer;
begin
  if IsWin64 then
  begin
    Exec(ExpandConstant('{app}\bin\nssm.exe'), 'stop adInterfaceService', ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  end;
end;

procedure startService();
var
  ResultCode: Integer;
begin
  if IsWin64 then
  begin
    Exec(ExpandConstant('{app}\bin\nssm.exe'), 'start adInterfaceService', ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  end;
end;

// 文字列を展開する
procedure Split(var Dest: TArrayOfString; Text: String; Separator: String);
var
  i, p: Integer;
begin
  i := 0;
  repeat
    SetArrayLength(Dest, i+1);
    p := Pos(Separator,Text);
    if p > 0 then begin
      Dest[i] := Copy(Text, 1, p-1);
      Text := Copy(Text, p + Length(Separator), Length(Text));
      i := i + 1;
    end else begin
      Dest[i] := Text;
      Text := '';
    end;
  until Length(Text)=0;
end;

// 64ビットOSにてJREのフォルダー名を取得する
function GetJava64Path(MinVersion: string): string;
var
  Index: Integer;
  Path: string;
  Versions: TArrayOfString;
  StringArray: TArrayOfString;
begin
  Result := ExpandConstant('{pf64}\{#jrePath}');
  if RegGetSubkeyNames(HKLM64, RegKeyJRE, Versions) then
    for Index := 0 to GetArrayLength(Versions)-1 do
      if (Versions[Index][2] = '.') and (Versions[Index][3] >= MinVersion) and
        RegQueryStringValue(HKLM64, RegKeyJRE + Versions[Index], 'JavaHome', Path) then
      begin
        Split(StringArray, Path,'\');
        Result := StringArray[GetArrayLength(StringArray)-1];
        Exit;
      end;
 end;

 // 32ビットOSにてJREのフォルダー名を取得する
function GetJava32Path(MinVersion: string): string;
var
  Index: Integer;
  Path: string;
  Versions: TArrayOfString;
  StringArray: TArrayOfString;
begin
  Result := ExpandConstant('{pf32}\{#jrePath}');
  if RegGetSubkeyNames(HKLM32, RegKeyJRE, Versions) then
    for Index := 0 to GetArrayLength(Versions)-1 do
      if (Versions[Index][2] = '.') and (Versions[Index][3] >= MinVersion) and
        RegQueryStringValue(HKLM32, RegKeyJRE + Versions[Index], 'JavaHome', Path) then
      begin
        Split(StringArray, Path,'\');
        Result := StringArray[GetArrayLength(StringArray)-1];
        Exit;
      end;
end;

// インストーラーを初期化
function InitializeSetup(): Boolean;
var
  Path: String;
  AppVersion: String;
  NowVersion: String;
begin
  Result := False;

  // インストール 及び、バージョンを確認
  if RegValueExists(HKEY_LOCAL_MACHINE, RegKeyEnv, 'ADFACTORY_HOME')
  then begin
    RegQueryStringValue(HKLM32, RegKeyEnv, 'ADFACTORY_HOME', Path);
    AppVersion := ExpandConstant('{#MyAppVersion}');
    NowVersion := GetIniString('Version', 'Ver', 'unknown', Path + '\version.ini');
    if 0 <= CompareText(AppVersion, NowVersion) then
    begin
      Result := True;
    end else begin
      // 「adFactory 本体のバージョンが新しいため、インストールできません。バージョンを確認してください。」を表示
      MsgBox(ExpandConstant('{cm:alert_not_equal_version}' + #13#10#13#10 + 
      'adFactory Version: ' + NowVersion + #13#10 +
      'Installler Version: ' + AppVersion), mbInformation, MB_OK);
    end;
  end else begin
      // 「adFactory 本体をインストールしてください。」を表示
      MsgBox(ExpandConstant('{cm:alert_not_installed}'), mbInformation, MB_OK);
  end;
end;

// インストールパスを取得する
function GetDefaultDir(def: string): string;
var
  Path: String;
begin
  if RegValueExists(HKEY_LOCAL_MACHINE, RegKeyEnv, 'ADFACTORY_HOME')
  then begin
    RegQueryStringValue(HKLM32, RegKeyEnv, 'ADFACTORY_HOME', Path);
    Result := Path;
  end else begin
    Result := 'c:\adFactory';
  end;
end;

// 各ダイアログで「次へ」ボタンが押された
function NextButtonClick(CurPageID: Integer): Boolean;
var
  ResultCode: Integer;
begin
  case CurPageID of
    wpReady:
      begin
        stopService();
      end;
    wpFinished:
      begin
        startService();
      end;
  end;

  Result := True;
end;

// アンインストールのステップが切り替わった
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  case CurUninstallStep of
    usUninstall:
      begin
        stopService();
      end;
    usDone:
      begin
        startService();
      end;
  end;
end;
