; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "adFactory"
#define MyAppPublisher "ADTEK FUJI Co., Ltd."
#define MyAppURL "http://www.adtek-fuji.co.jp/"
#define MyAppContact "0564-31-4690"
#define MyAppVersion ReadIni(SourcePath+"version.ini", "Version", "Ver", "unknown")

#define vcredist64 "vcredist_x64.exe"
#define vcredist86 "vcredist_x86.exe"
#define TomeeZip "apache-tomee-1.7.4-plume.zip"
#define TomeePath "apache-tomee-plume-1.7.4"
#define ApacheZip "httpd-2.2.34-win32.zip"
#define ApachePath "Apache-2.2.34"
#define ApacheFtpZip "ftpserver-1.0.6.zip"
#define ApacheFtpPath "apache-ftpserver-1.0.6"
#define JavaInstaller "jre-8u321-windows-i586.exe"
#define jrePath "Java\jre1.8.0_321"
#define javaPath "Java"
#define PostgresqlInstaller "postgresql-9.3.19-1-windows.exe"
#define PostgresqlPath "postgreSQL"
#define PostgresqlService "postgresql-9.3"
#define acrobatInstaller "readerdc_jp_fb_install.exe"
#define dotNetFx40 "dotNetFx40_Full_x86_x64.exe"

#define ApacheFtpName "ApacheFtpServer"
#define TomeeName "TomEE" 
#define ApacheName "Apache2" 
#define PostgresqlName "postgresql-9.3"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{690DA003-0A50-4D81-B4D5-427F2BCE7A8C}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppContact={#MyAppContact}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName=c:\{#MyAppName}
DefaultGroupName={#MyAppName}
AppCopyright={#MyAppPublisher}
AllowNoIcons=yes
AllowUNCPath=no
OutputBaseFilename=adFactorySetup_win32_v{#MyAppVersion}
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin
SetupLogging=yes
ChangesEnvironment=yes

[Languages]
Name: "en"; MessagesFile: "compiler:Default.isl"; LicenseFile :License_en.txt
Name: "jp"; MessagesFile: "compiler:Languages\Japanese.isl"; LicenseFile :License_jp.txt

[CustomMessages]
en.fullInstall=full install
en.serverInstall=adFactory server install
en.managementInstall=adFactory management tools install
en.clientInstall=adFactory client tools install
en.customInstall=custom install
en.adFactoryServer=adFactory Server
en.adInterfaceService=adInterface Service
en.managementTools=adFactory Management Tools
en.adManagerTool=adManager application
en.clientTools=Client Tools
en.adAndonTool=adMonitor application
en.adSetupTool=adSetupTool
en.alert_not_installed=Can not installed on your computer.Please use 64-bit installer.
en.adManagerTool_del=adManager application
jp.fullInstall=完全インストール
jp.serverInstall=adFactoryサーバーのインストール
jp.managementInstall=adFactory管理ツールのインストール
jp.clientInstall=adFactoryクライアントツールのインストール
jp.customInstall=カスタムインストール
jp.adFactoryServer=adFactory サーバー
jp.adInterfaceService=adInterface 管理サービス
jp.managementTools=adFactory 管理ツール
jp.adManagerTool=adManager 生産管理アプリケーション
jp.clientTools=adFactory クライアントツール
jp.adAndonTool=adMonitor アプリケーション
jp.adSetupTool=adSetupTool
jp.alert_not_installed=お使いのコンピュータには、インストールできません。64ビット用のインストーラーを使用しください。
jp.adManagerTool_del=adManager 生産管理アプリケーション

[Types]
Name: "full"; Description: {cm:fullInstall}
Name: "server"; Description: {cm:serverInstall}
Name: "management"; Description: {cm:managementInstall}
Name: "client"; Description: {cm:clientInstall}
Name: "custom"; Description: {cm:customInstall}; Flags: iscustom

[Components]
Name: "server"; Description: {cm:adFactoryServer}; Types: "full server"
; Name: "server\adInterface"; Description: {cm:adInterfaceService}; Types: "full server"; Flags: restart
Name: "server\adInterface"; Description: {cm:adInterfaceService}; Types: "full server"
Name: "management"; Description: {cm:managementTools}; Types: "full management"
Name: "management\adManager"; Description: {cm:adManagerTool}; Types: "full management"
Name: "client"; Description: {cm:clientTools}; Types: "full client"
Name: "client\adAndon"; Description: {cm:adAndonTool}; Types: "full client"

[Registry]
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "ADFACTORY_HOME"; ValueData: "{app}"; Flags: uninsdeletekeyifempty uninsdeletevalue
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"; ValueType: expandsz; ValueName: "JRE_HOME"; ValueData: "{pf32}\{#javaPath}\{code:GetJava32Path|8}";
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpServer"; ValueType: dword; ValueName: "Enabled"; ValueData: "1"; Components: server; Flags: uninsdeletekeyifempty uninsdeletevalue
Root: HKLM; Subkey: "SYSTEM\CurrentControlSet\Services\W32Time\Config"; ValueType: dword; ValueName: "AnnounceFlags"; ValueData: "5"; Components: server; Flags: uninsdeletekeyifempty uninsdeletevalue

[Dirs]
Name: {app}\db; Check:isDbDirExist('{app}db'); Permissions: authusers-modify
Name: {app}\3rd; Check:isDbDirExist('{app}\3rd'); Permissions: authusers-modify
Name: {app}\bin; Check:isDbDirExist('{app}\bin'); Permissions: authusers-modify
Name: {app}\conf; Check:isDbDirExist('{app}\conf'); Permissions: everyone-modify
Name: {app}\ext; Check:isDbDirExist('{app}\ext'); Permissions: everyone-modify
Name: {app}\deploy; Check:isDbDirExist('{app}\deploy'); Permissions: authusers-modify
Name: {app}\licenses; Check:isDbDirExist('{app}\licenses'); Permissions: authusers-modify
Name: {app}\logs; Check:isDbDirExist('{app}\logs'); Permissions: everyone-modify
Name: {app}\plugin; Check:isDbDirExist('{app}\plugin'); Permissions: authusers-modify
Name: {app}\template; Check:isDbDirExist('{app}\template'); Permissions: authusers-modify
Name: {app}\3rd\{#ApacheFtpPath}\res\home\data\pdoc; Check:isDbDirExist('{app}\3rd\{#ApacheFtpPath}\res\home\data\pdoc'); Permissions: authusers-modify

[Files]
Source: "version.ini"; DestDir: "{app}\"; Flags: ignoreversion; BeforeInstall: getNowVersion(); AfterInstall: getNextVersion()
Source: "unzipper.dll"; Flags: dontcopy
Source: "bin\win32\nssm.exe"; DestDir: "{app}\bin"; Flags: onlyifdoesntexist;
Source: "bin\daily_task.bat"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: server
Source: "bin\ftpservice.bat"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: server;
Source: "bin\ntpserver.bat"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: server; AfterInstall: installNtpServer()
Source: "{src}\3rd\{#JavaInstaller}"; DestDir: "{tmp}"; Flags: external; ExternalSize: 778596352; Check: isDbDirExist('{pf32}\{#jrePath}'); AfterInstall: installJava()
Source: "{src}\3rd\{#vcredist86}"; DestDir: "{tmp}"; Flags: external; ExternalSize: 11100000; AfterInstall: installVcredist('{#vcredist86}')
Source: "{src}\3rd\{#TomeeZip}"; DestDir: "{tmp}"; Flags: external; ExternalSize: 59679729; Components: server; Check: isDbDirExist('{app}\3rd\{#TomeePath}'); BeforeInstall: beforeInstallTomee(); AfterInstall: unzipTomee()
Source: "{src}\3rd\{#ApacheZip}"; DestDir: "{tmp}"; Flags: external; ExternalSize: 43814912; Components: server; Check: isDbDirExist('{app}\3rd\{#ApachePath}'); BeforeInstall: beforeInstallApache(); AfterInstall: installApache()
Source: "{src}\3rd\{#ApacheFtpZip}"; DestDir: "{tmp}"; Flags: external; ExternalSize: 2841781; Components: server; Check: isServiceInstall('{#ApacheFtpName}'); BeforeInstall: beforeInstallApacheFtp(); AfterInstall: installApacheFtp()
Source: "{src}\3rd\{#dotNetFx40}"; DestDir: "{tmp}"; Flags: external skipifsourcedoesntexist; ExternalSize: 50449456; Check: not IsDotNet4Installed; AfterInstall: installDotNetFx40()
Source: "bin\adFloorLayoutEditor.exe"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: client\adAndon

Source: "3rd\tomee\logging.properties"; DestDir: "{app}\3rd\\{#TomeePath}\conf"; Components: server;
Source: "3rd\tomee\service.bat"; DestDir: "{app}\3rd\\{#TomeePath}\bin"; Components: server;
Source: "3rd\tomee\server.xml"; DestDir: "{app}\3rd\\{#TomeePath}\conf"; Components: server;
Source: "3rd\tomee\tomcat-users.xml"; DestDir: "{app}\3rd\\{#TomeePath}\conf"; Components: server;
Source: "3rd\tomee\tomee.xml"; DestDir: "{app}\3rd\\{#TomeePath}\conf"; Components: server;
Source: "3rd\tomee\catalina.bat"; DestDir: "{app}\3rd\\{#TomeePath}\bin"; Components: server;
Source: "3rd\tomee\service.install.as.admin.bat"; DestDir: "{app}\3rd\\{#TomeePath}\bin"; Components: server; AfterInstall: installTomee()

Source: "3rd\apache\adtekfuji.crt"; DestDir: "{app}\3rd\\{#ApachePath}\conf"; Components: server;
Source: "3rd\apache\adtekfuji.key"; DestDir: "{app}\3rd\\{#ApachePath}\conf"; Components: server;
Source: "3rd\apache\httpd.conf"; DestDir: "{app}\3rd\\{#ApachePath}\conf"; Components: server;
Source: "3rd\apache\extra\httpd-ssl.conf"; DestDir: "{app}\3rd\\{#ApachePath}\conf\\extra"; Components: server;

Source: "3rd\apacheftp\ftpd.bat"; DestDir: "{app}\3rd\\{#ApacheFtpPath}\bin"; Components: server; Check: CustomizeCheck();
Source: "3rd\apacheftp\ftpd.xml"; DestDir: "{app}\3rd\\{#ApacheFtpPath}\res\conf"; Components: server;

Source: "db\postgres\create\*"; DestDir: "{app}\db\postgres\create"; Flags: ignoreversion; Components: server       
Source: "db\postgres\update\*"; DestDir: "{app}\db\postgres\update"; Flags: ignoreversion; Components: server                                             
Source: "{src}\3rd\{#PostgresqlInstaller}"; DestDir: "{tmp}"; Flags: external; ExternalSize: 212058112; Components: server; Check: isServiceInstall('{#PostgresqlName}'); AfterInstall: installPostgreSQL()
Source: "bin\adDatabaseApp.exe"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: server;
Source: "bin\adDatabaseApp_Start.bat"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: server;AfterInstall: AfterInstallPostgreSQL()
Source: "3rd\postgresql\postgresql.conf.temp"; DestDir: "{app}\3rd\{#PostgresqlPath}\data"; Components: server; Flags: ignoreversion;
Source: "3rd\postgresql\replace.jse"; DestDir: "{app}\3rd\{#PostgresqlPath}\data"; Components: server; Flags: ignoreversion; AfterInstall: updatePostgreConf()
Source: "liblary\jersey-core-1.18.3.jar"; DestDir: "{app}\3rd\{#TomeePath}\lib"; Flags: onlyifdoesntexist; Components: server
Source: "liblary\postgresql-9.4-1201.jdbc41.jar"; DestDir: "{app}\3rd\{#TomeePath}\lib"; Flags: onlyifdoesntexist; Components: server
Source: "liblary\postgresql-9.4-1201.jdbc41.jar"; DestDir: "{pf32}\{#javaPath}\{code:GetJava32Path|8}\lib\ext"; Check: not IsWin64; Flags: onlyifdoesntexist uninsneveruninstall
Source: "liblary\RXTXcomm.jar"; DestDir: "{pf32}\{#javaPath}\{code:GetJava32Path|8}\lib\ext"; Flags: onlyifdoesntexist
Source: "liblary\32bit\rxtxParallel.dll"; DestDir: "{pf32}\{#javaPath}\{code:GetJava32Path|8}\bin"; Flags: onlyifdoesntexist
Source: "liblary\32bit\rxtxSerial.dll"; DestDir: "{pf32}\{#javaPath}\{code:GetJava32Path|8}\bin"; Flags: onlyifdoesntexist
Source: "liblary\javax.mail.jar"; DestDir: "{pf32}\{#javaPath}\{code:GetJava32Path|8}\lib\ext"; Flags: onlyifdoesntexist; Components: server
Source: "liblary\jackson-core-2.8.11.jar"; DestDir: "{pf32}\{#javaPath}\{code:GetJava32Path|8}\lib\ext"; Flags: onlyifdoesntexist;
Source: "liblary\jackson-annotations-2.8.11.jar"; DestDir: "{pf32}\{#javaPath}\{code:GetJava32Path|8}\lib\ext"; Flags: onlyifdoesntexist;
Source: "liblary\jackson-databind-2.8.11.jar"; DestDir: "{pf32}\{#javaPath}\{code:GetJava32Path|8}\lib\ext"; Flags: onlyifdoesntexist;

Source: "licenses\*"; DestDir: "{app}\licenses"; Flags: ignoreversion

;Source: "bin\nssm.exe"; DestDir: "{app}\bin"; Flags: onlyifdoesntexist; Components: server
Source: "bin\adFactorySettingTool.exe"; DestDir: "{app}\bin"; Flags: ignoreversion
Source: "bin\adAndonApp.exe"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: client\adAndon
Source: "bin\DashboardCustomizeTool.exe"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: management\adManager or client\adAndon
Source: "bin\Dockingcontrollayout.dll"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: management\adManager or client\adAndon
Source: "bin\Infragistics4.Shared.v15.1.dll"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: management\adManager or client\adAndon
Source: "bin\Infragistics4.Win.Misc.v15.1.dll"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: management\adManager or client\adAndon
Source: "bin\Infragistics4.Win.UltraWinDock.v15.1.dll"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: management\adManager or client\adAndon
Source: "bin\Infragistics4.Win.v15.1.dll"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: management\adManager or client\adAndon
Source: "bin\Ionic.Zip.dll"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: management\adManager or client\adAndon
Source: "bin\log4net.dll"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: management\adManager or client\adAndon
Source: "bin\adManagerApp.exe"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: management\adManager
Source: "bin\adInterfaceService.exe"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: server\adInterface;
Source: "bin\configure.bat"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: server\adInterface; AfterInstall: configure()
Source: "bin\install_task.bat"; DestDir: "{app}\bin";  Components: server; Flags: ignoreversion; AfterInstall: installTask()
Source: "bin\7za.exe"; DestDir: "{app}\bin"; Flags: onlyifdoesntexist
Source: "bin\collect_logs.bat"; DestDir: "{app}\bin"; Flags: ignoreversion
Source: "bin\daily_task.bat"; DestDir: "{app}\bin"; Flags: ignoreversion
Source: "bin\print_excel.vbs"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: management\adManager
Source: "bin\adSetupTool.exe"; DestDir: "{app}\bin"; Flags: ignoreversion; Components: management\adManager or client\adAndon

Source: "plugin\WarehouseServicePlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: server\adInterface; AfterInstall: setupWindowsService('adInterfaceService', '{cm:adInterfaceService}', '{app}\bin\adInterfaceService.exe')

Source: "CmdSatellite\*"; DestDir: "{app}\CmdSatellite"; Flags: ignoreversion; Components: client\adAndon

Source: "conf\adAndonCustomizeTool.xml"; DestDir: "{app}\conf"; Flags: ignoreversion; Components: management\adManager or client\adAndon
Source: "conf\adAndonCustomizeToolItemList.ini"; DestDir: "{app}\conf"; Flags: ignoreversion; Components: management\adManager or client\adAndon
Source: "conf\adAndonCustomizeToolLayoutInfo.cfg"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist; Components: management\adManager or client\adAndon
Source: "conf\adAndonCustomizeToolLayoutInfo.xml"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist; Components: management\adManager or client\adAndon
Source: "conf\Dashboard.ini"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist; Components: management\adManager or client\adAndon
Source: "conf\DashboardBackup.ini"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist; Components: management\adManager or client\adAndon
Source: "conf\InitialLayoutInfo"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist; Components: management\adManager or client\adAndon
Source: "conf\adAccessoryPlugins.xml"; DestDir: "{app}\conf"; Flags: ignoreversion; Components: management\adManager
Source: "conf\HTMENU.MST"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist; Components: server\adInterface;
Source: "conf\AFFILI.MST"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist; Components: server\adInterface;
Source: "conf\adAndonApp.properties"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist; Components: client\adAndon
Source: "conf\adManeApp.properties"; DestDir: "{app}\conf"; Flags: onlyifdoesntexist; Components: management\adManager

Source: "deploy\index.html"; DestDir: "{app}\deploy"; Components: server; Check: CustomizeCheck();
Source: "deploy\softwareupdate.xml"; DestDir: "{app}\deploy"; Components: server; Check: CustomizeCheck();

Source: "plugin\StandardLocalePlugin.jar"; DestDir: "{app}\plugin"; DestName: "StandardLocalePlugin.jar"; Flags: ignoreversion sharedfile; Components: management or client;
Source: "plugin\adManagerAndonSettingPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: management\adManager
Source: "plugin\adManagerEquipmentEditPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: management\adManager
Source: "plugin\adManagerKanbanEditPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: management\adManager
Source: "plugin\adManagerLineTimerPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: management\adManager
Source: "plugin\adManagerOrganizationEditPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: management\adManager
Source: "plugin\adManagerReportOutPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: management\adManager
Source: "plugin\adManagerSystemSettingPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: management\adManager
Source: "plugin\adManagerWorkflowEditPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: management\adManager
Source: "plugin\adManagerWarehousePlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: management\adManager
Source: "plugin\adManagerChartPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: management\adManager
Source: "plugin\adManaProductionNaviPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: management\adManager 
Source: "plugin\adManagerWorkReportPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: management\adManager

Source: "plugin\adAndonClockPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adAndonDailyDelayNumPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adAndonDailyInterruptNumPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adAndonDailyPlanDeviatedNumPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adAndonDailyPlanDeviatedTimePlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adAndonDailyPlanNumPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adAndonDailyWorkPlanNumPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adAndonLineCountDownPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adAndonLineTaktTimePlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adAndonMonthlyPlanDeviatedNumPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adAndonMonthlyPlanNumPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adAndonTitlePlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adMonitorBlankSpacePlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adMonitorEquipmentPlanNumPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adMonitorEquipmentStatusPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adMonitorLineStatusPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adAndonWorkPlanNumPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
Source: "plugin\adMonitorFloorPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon

;Source: "plugin\adAndonEquipmentPlanNumPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
;Source: "plugin\adAndonEquipmentStatusPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon
;Source: "plugin\adAndonLineStatusPlugin.jar"; DestDir: "{app}\plugin"; Flags: ignoreversion; Components: client\adAndon

Source: "template\arrived_kanban.xlsx"; DestDir: "{app}\template"; Flags: onlyifdoesntexist; Components: management\adManager
Source: "template\payout_kanban.xlsx"; DestDir: "{app}\template"; Flags: onlyifdoesntexist; Components: management\adManager
Source: "template\accept_report.xlsx"; DestDir: "{app}\template"; Flags: onlyifdoesntexist; Components: management\adManager
Source: "template\stocktaking_report.xlsx"; DestDir: "{app}\template"; Flags: onlyifdoesntexist; Components: management\adManager

Source: "war\adFactoryServer.war"; DestDir: "{app}\3rd\{#TomeePath}\webapps"; Flags: ignoreversion; Components: server

Source: "ext\KanbanCSV.xlsm"; DestDir: "{app}\ext"; Flags: ignoreversion; Components: management\adManager
Source: "ext\picking_order.xlsm"; DestDir: "{app}\ext"; Flags: ignoreversion; Components: server


[Icons]
Name: "{userdesktop}\{cm:adManagerTool}"; Filename: "{app}\bin\adManagerApp.exe"; Flags: createonlyiffileexists; Components: management\adManager
Name: "{userdesktop}\{cm:adAndonTool}"; Filename: "{app}\bin\adAndonApp.exe"; Flags: createonlyiffileexists; Components: client\adAndon
Name: "{group}\{cm:adManagerTool}"; Filename: "{app}\bin\adManagerApp.exe"; Flags: createonlyiffileexists; Components: management\adManager
Name: "{group}\{cm:adAndonTool}"; Filename: "{app}\bin\adAndonApp.exe"; Flags: createonlyiffileexists; Components: client\adAndon
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"; AfterInstall: saveLog()
Name: "{group}\{cm:adSetupTool}"; Filename: "{app}\bin\adSetupTool.exe"; Flags: createonlyiffileexists

[Run]
Filename: "{app}\bin\adSetupTool.exe"; WorkingDir: "{app}\bin"; Flags: waituntilterminated runascurrentuser; Components: not server and (management\adManager or client\adAndon);
Filename: "net"; Parameters: start {#PostgresqlService}; Components: server; Flags: runhidden runascurrentuser
Filename: "net"; Parameters: start Tomee; Flags: runhidden runascurrentuser
Filename: "net"; Parameters: start Apache2; Flags: runhidden runascurrentuser
Filename: "{app}\bin\ntpserver.bat"; Components: server; Flags: runhidden runascurrentuser
Filename: "{app}\bin\nssm.exe"; Parameters: start ApacheFtpServer; Flags: runhidden runascurrentuser
Filename: "{app}\bin\nssm.exe"; Parameters: start adInterfaceService; Flags: runhidden runascurrentuser
Filename: "netsh"; Parameters: "advfirewall firewall add rule name=""NTP_Service_IN"" dir=in profile=any localip=any remoteip=any protocol=udp localport=123 remoteport=123 action=allow"; Components: server; Flags: runhidden runascurrentuser
Filename: "netsh"; Parameters: "advfirewall firewall add rule name=""NTP_Service_OUT"" dir=out profile=any localip=any remoteip=any protocol=udp localport=123 remoteport=123 action=allow"; Components: server; Flags: runhidden runascurrentuser
Filename: "sc"; Parameters: "config W32Time start= delayed-auto"; Components: server; Flags: runhidden
Filename: "http://localhost:8080/adFactoryServer/"; Description: "About adFactory server"; Components: server; Flags: postinstall shellexec

[InstallDelete]
Type: files; Name: "{app}\plugin\adAndonEquipmentPlanNumPlugin.jar"
Type: files; Name: "{app}\plugin\adAndonEquipmentStatusPlugin.jar"
Type: files; Name: "{app}\plugin\adAndonLineStatusPlugin.jar"
Type: files; Name: "{userdesktop}\{cm:adManagerTool_del}.lnk"

[UninstallDelete]
;Type: filesandordirs; Name: "{app}\3rd\{#TomeePath}"
;Type: filesandordirs; Name: "{app}\3rd\{#ApachePath}"
Type: filesandordirs; Name: "{app}\db"
Type: filesandordirs; Name: "{app}\bin"
Type: filesandordirs; Name: "{app}\conf"
Type: filesandordirs; Name: "{app}\licenses"
Type: filesandordirs; Name: "{app}\logs"
Type: filesandordirs; Name: "{app}\plugin"
Type: filesandordirs; Name: "{app}\template"
Type: filesandordirs; Name: "{app}\war"

[UninstallRun]
Filename: "{app}\bin\nssm.exe"; Parameters: stop ApacheFtpServer; Components: server; Flags: runhidden
Filename: "{app}\bin\nssm.exe"; Parameters: remove ApacheFtpServer confirm; Components: server; Flags: runhidden
Filename: "{app}\bin\nssm.exe"; Parameters: stop adInterfaceService; Components: server\adInterface; Flags: runhidden
Filename: "{app}\bin\nssm.exe"; Parameters: remove adInterfaceService confirm; Components: server\adInterface; Flags: runhidden
Filename: "netsh"; Parameters: "advfirewall firewall delete rule name=""Apache HTTP Server"""; Components: server; Flags: runhidden runascurrentuser
Filename: "netsh"; Parameters: "advfirewall firewall delete rule name=""NTP_Service_IN"""; Components: server; Flags: runhidden runascurrentuser
Filename: "netsh"; Parameters: "advfirewall firewall delete rule name=""NTP_Service_OUT"""; Components: server; Flags: runhidden runascurrentuser
Filename: "net"; Parameters: stop Apache2; Components: server; Flags: runhidden runascurrentuser
Filename: "net"; Parameters: stop TomEE; Components: server; Flags: runhidden runascurrentuser
Filename: "sc"; Parameters: delete Apache2; Components: server; Flags: runhidden runascurrentuser
Filename: "{app}\3rd\{#TomeePath}\bin\service.remove.as.admin.bat"; Components: server; Flags: runhidden
Filename: "{app}\3rd\{#PostgresqlPath}\uninstall-postgresql.exe"; Components: server; Flags: skipifdoesntexist
Filename: "sc"; Parameters: "config W32Time start= demand"; Flags: runhidden
Filename: "schtasks"; Parameters: "/delete /tn ""Daily Task"" /f"; Flags: runhidden
Filename: "schtasks"; Parameters: "/delete /tn ""adFactoryDB Regular Maintenance"" /f"; Flags: runhidden

[Code]
//************************* Win32 API *************************
#ifdef UNICODE
  #define AW "W"
#else
  #define AW "A"
#endif

function SetEnvironmentVariable(lpName: string; lpValue: string): BOOL;
  external 'SetEnvironmentVariable{#AW}@kernel32.dll stdcall';

type
    SERVICE_STATUS = record
        dwServiceType               : cardinal;
        dwCurrentState              : cardinal;
        dwControlsAccepted          : cardinal;
        dwWin32ExitCode             : cardinal;
        dwServiceSpecificExitCode   : cardinal;
        dwCheckPoint                : cardinal;
        dwWaitHint                  : cardinal;
    end;
    HANDLE = cardinal;

const
    SERVICE_QUERY_CONFIG        = $1;
    SERVICE_CHANGE_CONFIG       = $2;
    SERVICE_QUERY_STATUS        = $4;
    SERVICE_START               = $10;
    SERVICE_STOP                = $20;
    SERVICE_ALL_ACCESS          = $f01ff;
    SC_MANAGER_ALL_ACCESS       = $f003f;
    SERVICE_WIN32_OWN_PROCESS   = $10;
    SERVICE_WIN32_SHARE_PROCESS = $20;
    SERVICE_WIN32               = $30;
    SERVICE_INTERACTIVE_PROCESS = $100;
    SERVICE_BOOT_START          = $0;
    SERVICE_SYSTEM_START        = $1;
    SERVICE_AUTO_START          = $2;
    SERVICE_DEMAND_START        = $3;
    SERVICE_DISABLED            = $4;
    SERVICE_DELETE              = $10000;
    SERVICE_CONTROL_STOP        = $1;
    SERVICE_CONTROL_PAUSE       = $2;
    SERVICE_CONTROL_CONTINUE    = $3;
    SERVICE_CONTROL_INTERROGATE = $4;
    SERVICE_STOPPED             = $1;
    SERVICE_START_PENDING       = $2;
    SERVICE_STOP_PENDING        = $3;
    SERVICE_RUNNING             = $4;
    SERVICE_CONTINUE_PENDING    = $5;
    SERVICE_PAUSE_PENDING       = $6;
    SERVICE_PAUSED              = $7;

function OpenSCManager(lpMachineName, lpDatabaseName: string; dwDesiredAccess :cardinal): HANDLE;
external 'OpenSCManager{#AW}@advapi32.dll stdcall';

function OpenService(hSCManager :HANDLE;lpServiceName: string; dwDesiredAccess :cardinal): HANDLE;
external 'OpenService{#AW}@advapi32.dll stdcall';

function DeleteService(hService :HANDLE): boolean;
external 'DeleteService@advapi32.dll stdcall';

function CloseServiceHandle(hSCObject :HANDLE): boolean;
external 'CloseServiceHandle@advapi32.dll stdcall';

//************************* Constants *************************
const RegKeyJRE = 'SOFTWARE\JavaSoft\Java Runtime Environment\';
const RegKeyEnv = 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment';

//************************* Global Variables *************************
var NowVersion: String;
var NextVersion: String;
var IsRestart: Boolean;


procedure unzip(src, target: AnsiString);
external 'unzip@files:unzipper.dll stdcall delayload';

procedure saveLog();
var
  ResultCode: Integer;
begin
  filecopy(ExpandConstant('{log}'), ExpandConstant('{app}\install.log'), false);
end;

procedure getNowVersion();
var
  ResultCode: Integer;
begin
  NowVersion:=GetIniString('Version', 'InternalVer', 'unknown', ExpandConstant('{app}\version.ini'));
  Log('[info]NowVersion:' + NowVersion)
end;

procedure getNextVersion();
var
  ResultCode: Integer;
begin
  NextVersion:=GetIniString('Version', 'InternalVer', 'unknown', ExpandConstant('{app}\version.ini'));
  Log('[info]NextVersion:' + NextVersion)
end;

// ディレクトリが存在しない場合は True を返す
function isDbDirExist(path: string): Boolean;
begin
  Result := True;
  if DirExists(ExpandConstant(path)) then
  begin
    Result := False;
  end;
end;

// JRE_HOMEを設定する
procedure SetJrePath(path: String);
begin
  if not SetEnvironmentVariable('JRE_HOME', path) then
    MsgBox(SysErrorMessage(DLLGetLastError), mbError, MB_OK);
  Log('[info]JRE_HOME:' + path)
end;

// サービスマネージャをオープンする
function openServiceManager(): HANDLE;
begin
  if UsingWinNT() = true then begin
    Result := OpenSCManager('', '', SC_MANAGER_ALL_ACCESS);
    if Result = 0 then
      MsgBox('The service manager is not available.', mbError, MB_OK)
    end
    else begin
      MsgBox('Only NT based systems supported.', mbError, MB_OK)
      Result := 0;
    end
end;

// サービスがインストールするか
function isServiceInstall(serviceName: string) : boolean;
var
    hSCM    : HANDLE;
    hService: HANDLE;
begin
    hSCM := openServiceManager();
    Result := True;
    if hSCM <> 0 then begin
        hService := OpenService(hSCM, serviceName, SERVICE_QUERY_CONFIG);
        if hService <> 0 then begin
            Result := False;
            CloseServiceHandle(hService)
        end;
        CloseServiceHandle(hSCM)
    end
end;

// サービスを削除する
function removeService(serviceName: string) : boolean;
var
    hSCM    : HANDLE;
    hService: HANDLE;
begin
    hSCM := openServiceManager();
    Result := false;
    if hSCM <> 0 then begin
        hService := OpenService(hSCM, serviceName, SERVICE_DELETE);
        if hService <> 0 then begin
            Result := DeleteService(hService);
            CloseServiceHandle(hService)
        end;
        CloseServiceHandle(hSCM)
    end
end;

procedure setupWindowsService(name, disp, path: String);
var
  ResultCode: Integer;
begin
  //msgbox('setup Windows service at ' + name + ', ' + ExpandConstant(path), mbConfirmation, MB_OK);
  Log('[info]setupWindowsService:' + name + ', ' + disp + ', ' + ExpandConstant(path))
  Exec(ExpandConstant('{app}\bin\nssm.exe'), 'stop ' + name,
    ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
  Log('[info]ResultCode:' + '{app}\bin\nssm.exe' + 'install ' + name + ' ' + ExpandConstant(path))
  Exec(ExpandConstant('{app}\bin\nssm.exe'), 'install ' + name + ' ' + ExpandConstant(path),
    ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
  Exec(ExpandConstant('{app}\bin\nssm.exe'), 'set ' + name + ' DisplayName "' + ExpandConstant(disp) + '"',
    ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
  Exec(ExpandConstant('{app}\bin\nssm.exe'), 'set ' + name + ' Description "' + ExpandConstant(disp) + '"',
    ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

procedure setWindowsServiceAppDirectory(name, path: String);
var
  ResultCode: Integer;
begin
  Log('[info]setWindowsServiceAppDirectory:' + name + ', ' + ExpandConstant(path))
  Exec(ExpandConstant('{app}\bin\nssm.exe'), 'set ' + name + ' AppDirectory  ' + ExpandConstant(path),
    ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

procedure stopWindowsService(name: String);
var
  ResultCode: Integer;
begin
  Log('[info]stopWindowsService:' + name)
  Exec(ExpandConstant('{app}\bin\nssm.exe'), 'stop ' + name,
    ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

procedure installNtpServer();
var
  ResultCode: Integer;
begin
  Log('[info]installNtpServer')
  Exec(ExpandConstant('{app}\bin\ntpserver.bat'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

procedure beforeInstallTomee();
var
  ResultCode: Integer;
begin
  // 旧バージョンのTomEEを削除
  if DirExists(ExpandConstant('{app}\3rd\apache-tomee-plume-1.7.1')) then
  begin
    Exec(ExpandConstant('{cmd}'), '/c net stop TomEE', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    Exec(ExpandConstant('{app}\3rd\apache-tomee-plume-1.7.1\bin\service.remove.as.admin.bat'), '',
      ExpandConstant('{tmp}'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
    DelTree(ExpandConstant('{app}\3rd\apache-tomee-plume-1.7.1'), True, True, True);
  end;

  if DirExists(ExpandConstant('{app}\3rd\{#TomeePath}')) then
  begin
    Log('[info]beforeInstallTomee')
    Exec(ExpandConstant('{cmd}'), '/c net stop TomEE', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    // WebAppフォルダの削除
    DelTree(ExpandConstant('{app}\3rd\{#TomeePath}\webapps\adFactoryServer'), True, True, True);
    Log('[info]ResultCode:' + IntToStr(ResultCode))
  end;
end;

// TomEEのパッケージを解凍
procedure unzipTomee();
begin
  Log('[info]unzipTomee')
  unzip(AnsiString(ExpandConstant('{tmp}\{#TomeeZip}')), AnsiString(ExpandConstant('{app}\3rd')));
end;

procedure installTomee();
var
  ResultCode: Integer;
begin
  //msgbox('installTomee ' + ExpandConstant('{tmp}\{#TomeeZip}') + ' to ' + ExpandConstant('{app}\3rd'), mbConfirmation, MB_OK);
  Log('[info]installTomee')
  Exec(ExpandConstant('{app}\3rd\{#TomeePath}\bin\service.install.as.admin.x86.bat'), '',
    ExpandConstant('{tmp}'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

procedure beforeInstallApache();
var
  ResultCode: Integer;
begin
  // 旧バージョンのApacheを削除
  if DirExists(ExpandConstant('{app}\3rd\Apache2')) then
  begin
    Exec(ExpandConstant('{cmd}'), '/c net stop Apache2', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    removeService(ExpandConstant('{#ApacheName}'));
    DelTree(ExpandConstant('{app}\3rd\Apache2'), True, True, True);
  end;

  if DirExists(ExpandConstant('{app}\3rd\{#ApachePath}')) then
  begin
    Log('[info]beforeInstallApache')
    Exec(ExpandConstant('{cmd}'), '/c net stop Apache2', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    Log('[info]ResultCode:' + IntToStr(ResultCode))
  end;
end;

procedure installApache();
var
  ResultCode: Integer;
begin
  //msgbox('installApache ' + ExpandConstant('{tmp}\{#ApacheZip}') + ' to ' + ExpandConstant('{app}\3rd'), mbConfirmation, MB_OK);
  Log('[info]installApache')
  unzip(AnsiString(ExpandConstant('{tmp}\{#ApacheZip}')), AnsiString(ExpandConstant('{app}\3rd')));
  RenameFile(ExpandConstant('{app}\3rd\Apache2'), ExpandConstant('{app}\3rd\{#ApachePath}'));
  DeleteFile(ExpandConstant('{app}\3rd\ReadMe.txt'));
  DeleteFile(ExpandConstant('{app}\3rd\-- Win32-2.2.34 VC10 --'));
  //ShellExec('', ExpandConstant('{app}\3rd\{#ApachePath}\conf\replace.jse'), ExpandConstant('{app}\3rd\{#ApachePath}'),
  //  ExpandConstant('{app}\3rd\{#ApachePath}\conf'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  //Log('[info]ResultCode:' + IntToStr(ResultCode))
  Exec(ExpandConstant('{app}\3rd\{#ApachePath}\bin\httpd.exe'), '-k install -n "Apache2"',
    ExpandConstant('{tmp}'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

procedure beforeInstallApacheFtp();
var
  ResultCode: Integer;
begin
  if DirExists(ExpandConstant('{app}\3rd\{#ApacheFtpPath}')) then
  begin
    Log('[info]beforeInstallApacheFtp')
    Exec(ExpandConstant('{app}\bin\nssm.exe'), 'stop ApacheFtpServer', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
    Log('[info]ResultCode:' + IntToStr(ResultCode))
  end;
end;

procedure installApacheFtp();
var
  ResultCode: Integer;
begin
  //msgbox(' ' + ExpandConstant('{tmp}\{#ApacheFtpZip}') + ' to ' + ExpandConstant('{app}\3rd'), mbConfirmation, MB_OK);
  Log('[info]installApacheFtp')
  unzip(AnsiString(ExpandConstant('{tmp}\{#ApacheFtpZip}')), AnsiString(ExpandConstant('{app}\3rd')));
  //setupWindowsService('ApacheFtpServer', 'Apache FtpServer', '{app}\bin\ftpservice.bat');
  setupWindowsService('ApacheFtpServer', 'Apache FtpServer', '{app}\3rd\{#ApacheFtpPath}\bin\ftpd.bat {app}\3rd\{#ApacheFtpPath}\res\conf\ftpd.xml');
    Exec(ExpandConstant('{app}\bin\nssm.exe'), 'stop ApacheFtpServer', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
  setWindowsServiceAppDirectory('ApacheFtpServer','{app}\3rd\{#ApacheFtpPath}');
  //Exec(ExpandConstant('{app}\bin\nssm.exe'), 'set ApacheFtpServer AppDirectory {app}\3rd\{#ApacheFtpPath}',
  //  ExpandConstant('{app}\bin'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;

procedure installVcredist(path: String);
var
  ResultCode: Integer;
begin
  //msgbox('Installation to ' + ExpandConstant('{pf64}\{#JavaPath}'), mbConfirmation, MB_OK);
  Log('[info]installVcredist:' + path)
  Exec(ExpandConstant('{tmp}\' + path), '/q /norestart',
    ExpandConstant('{tmp}'), SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

procedure installJava();
var
  ResultCode: Integer;
begin
  //msgbox('Installation to ' + ExpandConstant('{pf64}\{#JavaPath}'), mbConfirmation, MB_OK);
  Log('[info]installJava')
  Exec(ExpandConstant('{tmp}\{#JavaInstaller}'), '/s',
    ExpandConstant('{tmp}'), SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))

  Exec(ExpandConstant('{app}\3rd\{#TomeePath}\bin\service.remove.as.admin.bat'), '',
    ExpandConstant('{tmp}'), SW_HIDE, ewWaitUntilTerminated, ResultCode);

  // 環境編集「JRE_HOME」の変更
  SetJrePath(ExpandConstant('{pf32}\{#javaPath}\{code:GetJava32Path|8}'));

  Exec(ExpandConstant('{app}\3rd\{#TomeePath}\bin\service.install.as.admin.bat'), '',
    ExpandConstant('{tmp}'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
end;

procedure installPostgreSQL();
var
  ResultCode: Integer;
begin
  //msgbox('Installation to ' + ExpandConstant('{app}\3rd\{#PostgresqlPath}'), mbConfirmation, MB_OK);
  Log('[info]installPostgreSQL')
  Exec(ExpandConstant('{tmp}\{#PostgresqlInstaller}'), '--mode unattended --superpassword postgres --prefix ' + ExpandConstant('{app}\3rd\{#PostgresqlPath}') + ' --datadir ' + ExpandConstant('{app}\3rd\{#PostgresqlPath}\data'),
    ExpandConstant('{tmp}'), SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

procedure AfterInstallPostgreSQL();
var
  ResultCode: Integer;
begin
  Log('[info]AfterInstallPostgreSQL')
  Exec(ExpandConstant('{app}\bin\adDatabaseApp_Start.bat'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

procedure updatePostgreConf();
var
  ResultCode: Integer;
begin
  //msgbox('Installation to ' + ExpandConstant('{app}\3rd\{#PostgresqlPath}'), mbConfirmation, MB_OK);
  Log('[info]updatePostgreConf')
  ShellExec('', ExpandConstant('{app}\3rd\{#PostgresqlPath}\data\replace.jse'), ExpandConstant('{app}'),
    ExpandConstant('{app}\3rd\{#PostgresqlPath}\data'), SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

//procedure updatePostgreDatabase();
//var
//  ResultCode: Integer;
//begin
//  //msgbox('updatePostgreDatabase ' + NowVersion + ' to ' + NextVersion, mbConfirmation, MB_OK);
//  Log('[info]updatePostgreDatabase:' + NowVersion + ' to ' + NextVersion)
//  Exec(ExpandConstant('{app}\db\postgres\update_table.bat'),
//    '"' + ExpandConstant('{app}\3rd\{#PostgresqlPath}') + '" ' + NowVersion + ' ' + NextVersion, '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
//  Log('[info]ResultCode:' + IntToStr(ResultCode))
//end;

procedure installTask();
var
  ResultCode: Integer;
begin
  Log('[info]AfterInstallTask')
  Exec(ExpandConstant('{app}\bin\install_task.bat'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;

procedure configure();
var
  ResultCode: Integer;
begin
  Log('[info]configure')
  Exec(ExpandConstant('{app}\bin\configure.bat'), '', '', SW_HIDE, ewWaitUntilTerminated, ResultCode);
  Log('[info]ResultCode:' + IntToStr(ResultCode))
end;


function NeedsAddPath(Param: String): Boolean;
var
  OrigPath: string;
begin
  if not RegQueryStringValue(HKEY_LOCAL_MACHINE,'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'Path', OrigPath)
  then begin
    Result := True;
    exit;
  end;
  Result := Pos(';' + UpperCase(Param) + ';', ';' + UpperCase(OrigPath) + ';') = 0;  
  if Result = True then
     Result := Pos(';' + UpperCase(Param) + '\;', ';' + UpperCase(OrigPath) + ';') = 0; 
end;

// 文字列を展開する
procedure Split(var Dest: TArrayOfString; Text: String; Separator: String);
var
  i, p: Integer;
begin
  i := 0;
  repeat
    SetArrayLength(Dest, i+1);
    p := Pos(Separator,Text);
    if p > 0 then begin
      Dest[i] := Copy(Text, 1, p-1);
      Text := Copy(Text, p + Length(Separator), Length(Text));
      i := i + 1;
    end else begin
      Dest[i] := Text;
      Text := '';
    end;
  until Length(Text)=0;
end;

// 32ビットOSにてJREのフォルダー名を取得する
function GetJava32Path(MinVersion: string): string;
var
  Index: Integer;
  Path: string;
  Versions: TArrayOfString;
  StringArray: TArrayOfString;
begin
  Result := ExpandConstant('{pf32}\{#jrePath}');
  if RegGetSubkeyNames(HKLM32, RegKeyJRE, Versions) then
    for Index := 0 to GetArrayLength(Versions)-1 do
      if (Versions[Index][2] = '.') and (Versions[Index][3] >= MinVersion) and
        RegQueryStringValue(HKLM32, RegKeyJRE + Versions[Index], 'JavaHome', Path) then
      begin
        Split(StringArray, Path,'\');
        Result := StringArray[GetArrayLength(StringArray)-1];
        Exit;
      end;
end;

// インストーラーを初期化
function InitializeSetup(): Boolean;
begin
  IsRestart := False;

  if not IsWin64() then
  begin
    Result := True;
    if not RegValueExists(HKEY_LOCAL_MACHINE, 'SYSTEM\CurrentControlSet\Control\Session Manager\Environment', 'ADFACTORY_HOME')
    then begin
      IsRestart := True;
    end;
  end else begin
    // 「お使いのコンピュータには、インストールできません。64ビット用のインストーラーを使用しください。」を表示
    MsgBox(ExpandConstant('{cm:alert_not_installed}'), mbInformation, MB_OK);
  end;
end;

// 各ダイアログで「次へ」ボタンが押された
function NextButtonClick(CurPageID: Integer): Boolean;
var
  ResultCode: Integer;
begin
  case CurPageID of
    wpReady:
      begin
        beforeInstallApache();
        beforeInstallApacheFtp();
        stopWindowsService('adInterfaceService');
        beforeInstallTomee();
      end;
    wpFinished:
      begin
      end;
  end;

  Result := True;
end;

// 再起動が必要かどうか
function NeedRestart(): Boolean;
begin
  Result := IsRestart;
end;

// カスタマイズされているかどうかを返す
function CustomizeCheck(): Boolean;
var
  Value: string;
begin
  Result := True;
  if RegQueryStringValue(HKLM32, RegKeyEnv, 'ADFACTORY_CUSTOM', Value) then
  begin
    if (Value = 'YES') then
    begin    
      Result := False;
    end;
  end;
end;

// .NET Framework 4 以上がインストールされているか (サブ)
function IsDotNetInstalledSub(RegKey: string): Boolean;
var
  RegValue: Cardinal;
begin
  Result := false;
  if RegValueExists(HKEY_LOCAL_MACHINE, RegKey, 'Install') then
  begin
    if RegQueryDWordValue(HKEY_LOCAL_MACHINE, RegKey, 'Install', RegValue) then
    begin
      // 1:インストール, 0:アンインストール
      if RegValue = 1 then
      begin
        Result := true;
      end;
    end;
  end;
end;

// .NET Framework 4 以上がインストールされているか
function IsDotNet4Installed(): Boolean;
var
  DotNetKey: string;
  CheckKey: string;
  RegValue: Cardinal;
begin
  Result := false;
  DotNetKey := 'SOFTWARE\Microsoft\NET Framework Setup\NDP';
  CheckKey := DotNetKey + '\v4\Full';
  if RegKeyExists(HKEY_LOCAL_MACHINE, CheckKey) then
  begin
    Result := IsDotNetInstalledSub(CheckKey);
  end else begin
    CheckKey := DotNetKey + '\v4\Client';
    if RegKeyExists(HKEY_LOCAL_MACHINE, CheckKey) then
    begin
      Result := IsDotNetInstalledSub(CheckKey);
    end;
  end;
end;

// .NET Framework 4 をインストールする
procedure installDotNetFx40();
var
  ResultCode: Integer;
begin
  Exec(ExpandConstant('{tmp}\{#dotNetFx40}'), '/q', ExpandConstant('{tmp}'), SW_SHOWNORMAL, ewWaitUntilTerminated, ResultCode);
end;

// プロパティファイルの値を更新する
//   PropFile: プロパティファイルパス
//   PropKey: プロパティのキー
//   PropValue: プロパティの値
//   IsAddOnly: 追加のみフラグ (True: 追加のみ, False: 追加・更新)
procedure UpdatePropValue(PropFile: String; PropKey: string; PropValue: string; IsAddOnly: Boolean);
var
  FileLines: TStringList;
  Index: Integer;
  StringArray: TArrayOfString;
  IsNotExist: Boolean;
begin
  // ファイルがない場合は何もしない
  if not FileExists(PropFile) then
  begin
    Exit;
  end;

  FileLines := TStringList.Create;
  try
    FileLines.LoadFromFile(PropFile);
    // 該当キーの行を検索して更新する
    IsNotExist := True;
    for Index := 0 to FileLines.Count - 1 do
    begin
      Split(StringArray, FileLines[Index], '=');
      if (StringArray[0] = PropKey) then
      begin
        FileLines[Index] := PropKey + '=' + PropValue;
        IsNotExist := False;
      end;
    end;
    // 該当キーの行が無かった場合は追加する
    if (IsNotExist) then
    begin
      FileLines.Add(PropKey + '=' + PropValue)
    end else begin
      // 新規追加のみ場合は更新しない
      if (IsAddOnly) then
      begin
        Exit;
      end;
    end;
    // ファイルを更新する
    FileLines.SaveToFile(PropFile);
  finally
    FileLines.Free;
  end
end;

// インストール前後タスク
procedure CurStepChanged(CurStep: TSetupStep);
begin
  case CurStep of
    ssInstall:// インストール開始前
      begin
      end;
    ssPostInstall:// インストール終了後
      begin
        // 生産管理メニュー「作業計画」無効設定 (設定済の場合は更新しない)
        UpdatePropValue(ExpandConstant('{app}\conf\adFactoryProductionNavi.properties'), 'disable.workplan', 'true', True);
        // 生産管理メニュー「作業者管理」無効設定 (設定済の場合は更新しない)
        UpdatePropValue(ExpandConstant('{app}\conf\adFactoryProductionNavi.properties'), 'disable.worker', 'true', True);
      end;
    ssDone:// セットアッププログラム終了前
    begin
    end;
  end;
end;
